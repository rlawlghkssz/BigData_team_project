#서울시  코로나19 확진자 코드
import pandas as pd
import numpy as np
from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm
from fbprophet import Prophet
import matplotlib.pyplot as plt
import seaborn as sns

file_name = f"seoul_covid2.csv"
file_name

covid_19 = pd.read_csv(file_name)
covid_19.shape

covid_19 = covid_19.sort_values(["연번"], ascending = False)
covid_19.head()
covid_19.tail()

import matplotlib.pyplot as plt
plt.rc("font", family="AppleGothic")
plt.rc("axes", unicode_minus = False)
plt.style.use("fivethirtyeight")

from IPython.display import set_matplotlib_formats
set_matplotlib_formats("retina")

covid_19["확진일"].head()

covid_19["확진일자"] = pd.to_datetime("2020"+ "-" + covid_19["확진일"].str.replace(".","-"))
covid_19["확진일자"].head()

covid_19["월"] = covid_19["확진일자"].dt.month
covid_19["주"] = covid_19["확진일자"].dt.isocalendar().week

#서울시 월별 확진자 수 추이

covid_19["확진일자"].value_counts().sort_index().plot(
    figsize=(15, 4), rot = 100, grid = True)
plt.axhline(50, linestyle=":", color = "red")

#일자별 확진자 수 선 프로그래프  #odc_count => oneday_count
covid_19["월일"] = covid_19["확진일자"].astype(str).map(lambda x : x[-5:])
odc_count = covid_19["월일"].value_counts().sort_index()
b = odc_count.plot(figsize=(15, 4), rot = 30)

#cc => case_count
for i in range(len(odc_count)):
    cc = odc_count.iloc[i]
    if cc > 250:
        b.text(x = i, y = odc_count.iloc[i], s = odc_count.iloc[i])
        
#일별 확진자 수 요약  #odc_count => oneday_count
odc_count.describe()

#확진자 수가 가장 많았던 날  #odc_count => oneday_count
odc_count[odc_count == odc_count.max()]

#확진자가 가장 많았던 날 발생 이력 찾기
covid_19[covid_19["월일"] == "12-03"].head()

b = odc_count.plot.bar(figsize = (100, 4), rot = 100)
b.axhline(100, linestyle=":")

#cc => case_count
for i in range(len(odc_count)):
    cc = odc_count.iloc[i]
    if cc > 10:
        b.text(x = i, y = odc_count.iloc[i], s = odc_count.iloc[i])
        
#cc => case_count
odc_count_last = odc_count[-50:]
b= odc_count_last.plot.bar(figsize=(24,4))
b.axhline(odc_count_last.median(), linestyle=":", color="red")
for i in range(len(odc_count_last)):
    cc = odc_count_last.iloc[i]
    if cc > 200:
        b.text(x = i, y = odc_count_last.iloc[i], s = odc_count_last.iloc[i])
        
        
        
#월별 확진자 수에 대한 빈도 수 #mc => month case
mc = covid_19["월"].value_counts().sort_index()
b = mc.plot.bar(rot = 20)

for i in range(len(mc)):
    mc_i = mc.iloc[i]
    if mc_i > 0:
        b.text(x = i, y = mc_i, s = mc_i)

        
#wc => week case
wc = covid_19["주"].value_counts().sort_index()

#2020-01-01부터 주 단위 빈도 수
wc.plot.bar(rot = 0, figsize=(15, 4))

#월과 주 합치기 #mwc => month week case
mwc = covid_19.groupby(["월", "주"])["연번"].count()

#월과 주 합친 그래프
mwc.plot.bar(figsize=(15, 4), rot = 100)

#모든 날짜를 행에 만들기
firtst = covid_19.iloc[-1]["확진일자"]
last = covid_19.iloc[0]["확진일자"]
firtst, last

#pd.date_range를 통해 시작하는 날짜부터 끝나는 날짜까지의 DatetimeIndex를 만들고 days라는 변수에 저장
days = pd.date_range(firtst, last)
days[:5]

#days 변수의 값 ="년도 월 일" 컬럼 이름을 갖는 dateframe 생성
days = pd.DataFrame({"확진일자": days})

#dc => day case
dc = covid_19["확진일자"].value_counts()

dc = dc.to_frame()

dc.columns = ["확진자 수"]

#확진자가 없는 날도 일자에 표현할 수 있도록 전체 일자와 확진 데이터를 merge로 합치기  #ad => all day
ad = days.merge(dc, left_on="확진일자", right_on=dc.index, how="left")
ad = ad.rename(columns={"연번":"확진자 수"})

#누적 확진자 수
ad["누적 확진"] = ad["확진자 수"].fillna(0).cumsum()

#년도를 제외하고 월-일 -> "일자" 컬럼 만들기
ad["일자"] = ad["확진일자"].astype(str).map(lambda x: x[-5:])

#"확진자수", "누적확진자 수" 컬럼을 갖는 데이터프레임 생성
accumulate_day = ad.set_index("일자")
accumulate_day = accumulate_day[["확진자 수","누적 확진"]]

#확진 월과 요일 구하기
ad["확진 월"] = ad["확진일자"].dt.month
ad["확진 요일"] = ad["확진일자"].dt.dayofweek

#월별, 요일별 확진자 수 groupby 구하기
ad_week = ad.groupby(
    ["확진 월", "확진 요일"])["확진자 수"].sum().unstack().astype(int)
ad_week

#확진 요일 숫자로 표현된 것을 문자로 변경
oneweek= "월 화 수 목 금 토 일"
oneweek = oneweek.split()

#컬럼의 이름을 요일명으로 변경
ad_week.columns = oneweek
ad_week.style.background_gradient(cmap="Greens")

#거주지역 확진자 수 빈도수 구하기
area_gu = covid_19["지역"].value_counts()
area_gu.sort_values().plot.barh(figsize=(15, 12), grid = True)
